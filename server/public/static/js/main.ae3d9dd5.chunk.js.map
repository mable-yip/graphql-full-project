{"version":3,"sources":["interface/models.ts","components/admin/InputUserForm.tsx","components/common/DataTable.tsx","components/common/styledComponets.ts","components/admin/ManageUser.tsx","components/common/ErrorMessage.tsx","components/login/LoginPage.tsx","components/route/privateRoute.tsx","components/App.tsx","index.tsx"],"names":["UserType","CycleType","InputFormType","InputForm","props","useState","firstName","lastName","email","password","userType","form","setForm","confirmedPassword","setConfirmedPassword","undefined","setErrorMessage","setFormSent","handleOnChange","key","event","newValue","target","value","Form","FormGroup","Label","Control","type","placeholder","onChange","Button","className","onClick","charAt","toUpperCase","slice","DataTable","headers","body","ButtonLabel","styled","label","color","button","bgColor","borderColor","hoveredBgColor","hoveredLabelColor","ALL_TEACHERS","gql","ALL_STUDENTS","ManagerUser","showCreateTeacher","setShowCreateTeacher","showCreateStudent","setShowCreatetudent","handleCloseCreateTeacher","handleCloseCreateStudent","allTeachers","useQuery","allStudents","teachersData","data","Users","studentsData","console","log","map","header","teacher","student","Modal","show","onHide","Header","closeButton","Title","Body","InputUserForm","TEACHER","closeModal","STUDENT","ErrorMessage","errorMessage","Alert","variant","message","LOGIN","LoginPage","loginInfo","setLoginInfo","useMutation","login","loading","error","history","useHistory","handleLogin","a","variables","useEffect","localStorage","setItem","userObj","jwt_decode","ADMIN","push","PrivateRoute","authenticationPath","routeProps","getItem","to","pathname","App","exact","path","component","httpLink","createHttpLink","uri","authLink","setContext","_","token","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.ae3d9dd5.chunk.js","sourcesContent":["export enum UserType {\r\n    ADMIN = 'admin',\r\n    TEACHER = 'teacher',\r\n    STUDENT = 'student',\r\n}\r\n\r\nexport interface Admin {\r\n    firstName: string \r\n    lastName: string\r\n    email: string \r\n    password: string\r\n    userType: UserType.ADMIN\r\n}\r\n\r\nexport interface Teacher {\r\n    firstName: string \r\n    lastName: string\r\n    email: string \r\n    password: string\r\n    userType: UserType.TEACHER\r\n}\r\n\r\nexport interface Student {\r\n    firstName: string \r\n    lastName: string\r\n    email: string \r\n    password: string\r\n    userType: UserType.STUDENT\r\n}\r\n\r\nexport type AdminInfo = Omit<Admin, \"password\"> \r\nexport type TeacherInfo = Omit<Teacher, \"password\"> \r\nexport type StudentInfo = Omit<Student, \"password\" | \"_id\"> \r\n\r\nexport interface AdminReducerState {\r\n    loadingTeachers: boolean,\r\n    loadingStudents: boolean,\r\n    errorTeachers?: string,\r\n    errorStudents?: string,\r\n    teacherList: {\r\n        [email: string]: Teacher\r\n    }\r\n    studentList: {\r\n        [email: string]: Student\r\n    },\r\n    error?: string,\r\n    loading: boolean\r\n}\r\n\r\nexport enum CycleType {\r\n    DAILY = 'daily',\r\n    WEEKLY = 'weekly',\r\n    FORNIGHTLY = 'fornightly',\r\n    MONTHLY = 'monthly'\r\n}\r\n\r\nexport interface Repeat {\r\n    cycle: string\r\n    startTime: string,\r\n    endTime: string\r\n}\r\n\r\nexport interface ClassModel {\r\n    _id: string \r\n    className: string \r\n    teacherEmail: string\r\n    studentsEmail: string[]\r\n    startDate: string \r\n    repeat: Repeat\r\n}\r\n\r\nexport interface ClassModelWithStudentInfo {\r\n    className: string \r\n    teacherEmail: string\r\n    startDate: string\r\n    repeat: Repeat\r\n    studentInfo: StudentInfo[]\r\n}\r\n\r\nexport type ClassModelPreview = Omit<ClassModel, \"_id\"> \r\n\r\nexport interface TeacherReducerState {\r\n    loading: boolean,\r\n    error: null | string,\r\n    classList: {\r\n        [email: string]: ClassModel\r\n    },\r\n    studentList: {\r\n        [email: string]: Student\r\n    }\r\n}\r\n\r\nexport interface AuthReducerState {\r\n    firstName?: string,\r\n    lastName?: string,\r\n    email?: string,\r\n    userType?: UserType.ADMIN | UserType.STUDENT | UserType.TEACHER,\r\n    error?: string,\r\n    loading: boolean,\r\n    signIn: boolean\r\n}\r\n\r\nexport interface SignInInfo {\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nexport enum InputFormType {\r\n    CREATE = \"create\",\r\n    EDIT = \"edit\"\r\n}\r\n\r\nexport interface BasicClassInfo {\r\n    className: string \r\n    startDate: string\r\n    repeat: Repeat\r\n}\r\n\r\nexport interface UpdatedForm {\r\n    className?: string\r\n    startDate?: string\r\n    repeat?: {\r\n        cycle?: string,\r\n        startTime?: string,\r\n        endTime?: string\r\n    },\r\n    addedStudentEmail?: string[]\r\n    deletedStudentEmail?: string[]\r\n}","import React, { useEffect, useState} from 'react'\r\nimport { Alert, Button, Form, FormGroup } from 'react-bootstrap';\r\nimport { Teacher, Student, UserType } from '../../interface/models'\r\nimport ErrorMessage from '../common/ErrorMessage';\r\n\r\nconst InputForm = (props: {userType: UserType.TEACHER | UserType.STUDENT, closeModal: () => void} ) => {\r\n    const [form, setForm] = useState<Teacher|Student>({ firstName:\"\", lastName: \"\", email:\"\", password:\"\", userType: props.userType})\r\n    const [confirmedPassword, setConfirmedPassword] = useState<string>(\"\")\r\n    const [errorMessage, setErrorMessage] = useState<string|undefined>(undefined)\r\n    const [formSent, setFormSent] = useState(false) \r\n\r\n    \r\n    // useEffect(()=>{\r\n    //     if(!loading && formSent){\r\n    //         if(error){\r\n    //             setErrorMessage(error)\r\n    //             return\r\n    //         }\r\n    //         setForm({ firstName:\"\", lastName: \"\", email:\"\", password:\"\", userType: props.userType})\r\n    //         setConfirmedPassword(\"\")\r\n    //         props.closeModal()\r\n    //     }\r\n    // }, [loading])\r\n\r\n    const handleOnChange = (key: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newValue = event.target.value\r\n        setForm({...form, [key]: newValue})\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        // clear the error message saved previosuly \r\n        setFormSent(false)\r\n        setErrorMessage(undefined)\r\n        // dispatch(clearError(null))  // TODO: check whether this action is needed ore not \r\n        // if (form.password !== confirmedPassword){\r\n        //     setErrorMessage(\"Passwords does not match!\")\r\n        //     return\r\n        // } \r\n        // dispatch(createUserRequest({\r\n        //     body: form\r\n        // }))\r\n        // setFormSent(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form>\r\n                <FormGroup>\r\n                    <Form.Label>First Name</Form.Label>\r\n                    <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"First Name\" \r\n                        value={form.firstName}\r\n                        onChange={handleOnChange(\"firstName\")}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Last Name\" \r\n                        value={form.lastName}\r\n                        onChange={handleOnChange(\"lastName\")}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control \r\n                        type=\"email\" \r\n                        placeholder=\"Email\" \r\n                        value={form.email}\r\n                        onChange={handleOnChange(\"email\")}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control \r\n                        type=\"password\" \r\n                        placeholder=\"Password\" \r\n                        value={form.password}\r\n                        onChange={handleOnChange(\"password\")}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control \r\n                        type=\"password\" \r\n                        placeholder=\"Confirm Password\" \r\n                        value={confirmedPassword}\r\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => setConfirmedPassword(event.target.value)}\r\n                    />\r\n                </FormGroup>          \r\n                \r\n                {/* <ErrorMessage errorMessage={errorMessage} /> */}\r\n\r\n                <Button\r\n                    className=\"btn-lg btn-dark btn-block\"\r\n                    onClick={handleSubmit}\r\n                >\r\n                    Create {props.userType.charAt(0).toUpperCase() + props.userType.slice(1)}\r\n                </Button>\r\n\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputForm ","import \"./dataTable.css\"\r\n\r\nconst DataTable = (props: {headers?: () => JSX.Element[], body?: () => JSX.Element[]}) => {\r\n    return(\r\n        <table>\r\n            <thead>\r\n                {props.headers && props.headers()}\r\n            </thead>\r\n            <tbody>\r\n                {props.body && props.body()}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default DataTable ","import styled from 'styled-components'\r\n\r\nexport const ButtonLabel = styled.label<{color: string}>`\r\n    color: ${(props) => props.color};\r\n    font-size: 17px;\r\n    padding-left: 5px;\r\n    padding-top: 3px;\r\n    padding-bottom: 5px;\r\n    padding-right: 5px;\r\n    cursor: pointer;\r\n`\r\n\r\nexport const Button = styled.button<{bgColor: string, hoveredBgColor: string, borderColor: string, hoveredLabelColor: string}>`\r\n    width: auto;\r\n    height: 35px;\r\n    background-color: ${(props) => props.bgColor};\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    border-color: ${(props) => props.borderColor};\r\n\r\n    &:hover {\r\n        background-color: ${(props) => props.hoveredBgColor};\r\n        & label {\r\n            color: ${(props) => props.hoveredLabelColor};\r\n        }\r\n    }\r\n`","import { UserType } from '../../interface/models'\r\nimport { Modal } from 'react-bootstrap';\r\nimport React, { useState } from 'react';\r\nimport InputUserForm from './InputUserForm';\r\nimport \"./manageUser.css\"\r\nimport DataTable from '../common/DataTable';\r\nimport { Button, ButtonLabel } from '../common/styledComponets';\r\nimport { gql, useQuery } from '@apollo/client';\r\n\r\nconst ALL_TEACHERS = gql`\r\n    query {\r\n        Users(userType: \"teacher\")\r\n        {\r\n            email\r\n            userType\r\n            firstName\r\n            lastName\r\n        }\r\n    }\r\n`;\r\n\r\nconst ALL_STUDENTS = gql`\r\n    query {\r\n        Users(userType: \"student\")\r\n        {\r\n            email\r\n            userType\r\n            firstName\r\n            lastName\r\n        }\r\n    }\r\n`;\r\n\r\nconst ManagerUser = () => {\r\n    const [showCreateTeacher, setShowCreateTeacher] = useState(false)\r\n    const [showCreateStudent, setShowCreatetudent] = useState(false)\r\n\r\n    const handleShowCreateTeacher = () => setShowCreateTeacher(true)\r\n    const handleCloseCreateTeacher = () => setShowCreateTeacher(false)\r\n\r\n    const handleShowCreateStudent = () => setShowCreatetudent(true)\r\n    const handleCloseCreateStudent = () => setShowCreatetudent(false)\r\n\r\n    const allTeachers = useQuery(ALL_TEACHERS);\r\n    const allStudents = useQuery(ALL_STUDENTS);\r\n\r\n    const teachersData = allTeachers.data ? allTeachers.data.Users : [] \r\n    const studentsData = allStudents.data ? allStudents.data.Users : []\r\n\r\n    console.log(teachersData)\r\n\r\n    // const handleDeleteUser = (email: string) => {\r\n    //     dispatch(deleteUserRequest({\r\n    //         body: null,\r\n    //         params: email\r\n    //     }))\r\n    // }\r\n\r\n    const headers = [\"Email\", \"First Name\", \"Last Name\", \"Action\"]\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n                <div className=\"mt-3 mr-3\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                            <h2>Manage Teacher</h2>\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                            <Button \r\n                                bgColor=\"green\" \r\n                                hoveredBgColor=\"darkgreen\"\r\n                                borderColor= \"green\"\r\n                                hoveredLabelColor=\"white\"\r\n                                onClick={handleShowCreateTeacher}\r\n                            > \r\n                                <ButtonLabel color=\"white\"> \r\n                                    Add Teacher \r\n                                </ButtonLabel>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <DataTable \r\n                        headers={() => headers.map(header => \r\n                            <th key={header}> {header} </th>)\r\n                        }\r\n                        \r\n                        body={() =>  teachersData.map((teacher: { email: {} | null | undefined; firstName: string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined; lastName: string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined; }) => \r\n                            <tr>\r\n                                <td> {teacher.email} </td>\r\n                                <td> {teacher.firstName} </td>\r\n                                <td> {teacher.lastName} </td>\r\n                                <td> \r\n                                    <Button \r\n                                        bgColor=\"white\" \r\n                                        hoveredBgColor=\"red\"\r\n                                        borderColor= \"red\"\r\n                                        hoveredLabelColor=\"white\"\r\n                                        //onClick={() => handleDeleteUser(teacher.email)}\r\n                                    > \r\n                                        <ButtonLabel color=\"red\"> Delete </ButtonLabel>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>)\r\n                        }\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"mt-3 ml-3\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                            <h2>Manage Student</h2>\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                            <Button \r\n                                bgColor=\"green\" \r\n                                hoveredBgColor=\"darkgreen\"\r\n                                borderColor= \"green\"\r\n                                hoveredLabelColor=\"white\"\r\n                                onClick={handleShowCreateStudent}\r\n                            > \r\n                                <ButtonLabel color=\"white\">Add Student</ButtonLabel>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <DataTable \r\n                        headers={() => headers.map(header => \r\n                            <th key={header}> {header} </th>)\r\n                        }\r\n                        body={() => studentsData.map((student: { email: {} | null | undefined; firstName: string | number | boolean | {} | React.ReactNodeArray | React.ReactPortal | React.ReactElement<any, string | React.JSXElementConstructor<any>> | null | undefined; lastName: string | number | boolean | {} | React.ReactNodeArray | React.ReactPortal | React.ReactElement<any, string | React.JSXElementConstructor<any>> | null | undefined; }) => \r\n                            <tr>\r\n                                <td> {student.email} </td>\r\n                                <td> {student.firstName} </td>\r\n                                <td> {student.lastName} </td>\r\n                                <td> \r\n                                    <Button \r\n                                        bgColor=\"white\" \r\n                                        hoveredBgColor=\"red\"\r\n                                        borderColor= \"red\"\r\n                                        hoveredLabelColor=\"white\"\r\n                                        //onClick={() => handleDeleteUser(student.email)}\r\n                                    > \r\n                                        <ButtonLabel color=\"red\"> Delete </ButtonLabel>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>)\r\n                        }\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <Modal show={showCreateTeacher} onHide={handleCloseCreateTeacher}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        Add Teacher\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <InputUserForm userType={UserType.TEACHER} closeModal={handleCloseCreateTeacher}/>\r\n                </Modal.Body>\r\n            </Modal>\r\n         \r\n            <Modal show={showCreateStudent} onHide={handleCloseCreateStudent}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        Add Student\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <InputUserForm userType={UserType.STUDENT} closeModal={handleCloseCreateStudent}/>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManagerUser","import { ApolloError } from \"@apollo/client\"\r\nimport { Alert } from \"react-bootstrap\"\r\n\r\nconst ErrorMessage = (props: {errorMessage: undefined | ApolloError }) => {\r\n    return(\r\n        props.errorMessage? \r\n        <Alert variant='danger'>\r\n            {props.errorMessage.message}\r\n        </Alert> :\r\n        <div> </div>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import React, { useEffect, useState } from \"react\"\r\nimport { Button, Form, FormGroup } from 'react-bootstrap';\r\nimport './loginPage.css';\r\nimport { useMutation, gql } from \"@apollo/client\";\r\nimport ErrorMessage from \"../common/ErrorMessage\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport { AdminInfo, StudentInfo, TeacherInfo, UserType } from \"../../interface/models\";\r\nimport { useHistory } from 'react-router';\r\n\r\nconst LOGIN = gql`\r\n  mutation ($email: String!, $password: String!){\r\n    login(\r\n      email: $email,\r\n      password: $password,\r\n    )\r\n  }\r\n`;\r\n\r\n const LoginPage = () => {\r\n    const [loginInfo, setLoginInfo] = useState({ email:\"\", password:\"\"})\r\n    const [login, { data, loading, error }] = useMutation(LOGIN);\r\n    const history = useHistory()\r\n\r\n    const handleOnChange = (key: string) => (event: React.ChangeEvent<HTMLInputElement>) =>{\r\n        const newValue = event.target.value\r\n        setLoginInfo({...loginInfo, [key]: newValue})\r\n    }\r\n\r\n    const handleLogin = async() => {\r\n        try{\r\n            await login({ variables: { email: loginInfo.email, password: loginInfo.password }})\r\n        } catch (error){\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data && !error){\r\n            localStorage.setItem('profile', data.login)\r\n            const userObj: AdminInfo | StudentInfo | TeacherInfo = jwt_decode(data.login)\r\n            if(userObj.userType === UserType.ADMIN){\r\n                history.push('/admin')\r\n            } \r\n            if (userObj.userType === UserType.STUDENT){\r\n                history.push('/student')\r\n            } \r\n            if (userObj.userType === UserType.TEACHER){\r\n                history.push('/teacher/classes')\r\n            }\r\n        }\r\n    }, [data, error])\r\n\r\n    console.log(\"data\", data)\r\n    console.log(\"error\", error)\r\n\r\n    return(\r\n        <div>\r\n            <Form className=\"login-form mt-5\">\r\n                <h1 className=\"text-center\"> Class Record System </h1>\r\n                {\r\n                    loading ?\r\n                    <h2> Loading... </h2> :\r\n                    <div>\r\n                        <FormGroup>\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                placeholder=\"Email\"\r\n                                value={loginInfo.email}\r\n                                onChange={handleOnChange(\"email\")}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Form.Label>Password </Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                value={loginInfo.password}\r\n                                onChange={handleOnChange(\"password\")}\r\n                            />\r\n                        </FormGroup>\r\n                    </div>\r\n                }\r\n\r\n                <ErrorMessage errorMessage={error}/>\r\n                <Button className=\"btn-lg btn-dark btn-block\" onClick={handleLogin}>\r\n                    Log in\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n }\r\n\r\n export default LoginPage","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect, Route, RouteProps } from \"react-router-dom\";\r\n\r\ninterface props {\r\n    authenticationPath: string;\r\n}\r\n  \r\nconst PrivateRoute = ({ authenticationPath, ...routeProps}: props & RouteProps) => {\r\n    const [loading, setLoading] = useState<Boolean>(true)\r\n    const accessToken = localStorage.getItem('profile')\r\n    \r\n    \r\n    if(!accessToken) {\r\n      console.log(\"1\")\r\n      return <Redirect to={{ pathname: authenticationPath }} />;\r\n    } else {\r\n      console.log(\"2\")\r\n      return <Route {...routeProps} />;\r\n    }\r\n  };\r\nexport default PrivateRoute;","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\nimport ManagerUser from \"./admin/ManageUser\";\nimport LoginPage from \"./login/LoginPage\";\nimport PrivateRoute from \"./route/privateRoute\";\n\nconst App = () => {\n  return (\n    <Switch>\n    <Route exact path=\"/login\"> <LoginPage /></Route>\n    <>\n      {/* { auth.signIn &&<Sidebar />}\n      { auth.signIn && <NavBarComponent/> } */}\n      <div className=\"appBody\">\n        {/* { auth.signIn && <Breadcrumbs/>} */}\n        <PrivateRoute path=\"/admin\" component={ManagerUser} authenticationPath='/login' exact />\n        {/* <PrivateRoute path=\"/student\" component={StudentHomePage} authenticationPath='/login' exact />\n        <PrivateRoute path=\"/teacher/classes\" component={ManageClass} authenticationPath='/login' exact />\n        <PrivateRoute path=\"/teacher/classes/new-class\" component={ClassForm} authenticationPath='/login' exact />\n        <PrivateRoute path=\"/teacher/classes/:classId\" component={ClassForm} authenticationPath='/login' exact />\n        <PrivateRoute path=\"/teacher/calendar\" component={Calendar} authenticationPath='/login' exact /> */}\n        \n      </div>\n    </>\n    <Redirect to=\"/login\"/>\n  </Switch> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink\n} from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('profile');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router>\n      <App />\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}